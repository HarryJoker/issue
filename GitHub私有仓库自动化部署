## GitHub私有仓库自动化部署

对于入门新手来说,Webhook可以理解为当你在本地完成代码工作后,Push提交到GitHub,GitHub检测到Push后,使用Webhook发送一条命令到你的VPS服务器上的Webhook.php文件,服务器检测到命令后根据webhook.php中的配置在服务器上执行Pull命令,同步GitHub上的代码到服务器.实现了简单的自动化部署工作.节省了你再次上传至服务器的多余操作.

## 部署流程

### 1，启用shell_exec

编辑`php.ini`

```
vi /usr/local/php/etc/php.ini
```

查找`shell_exec`,在`disable_functions`中删除`shell_exec`字段.
![img](https://www.ioiox.com/usr/uploads/2020/01/2534066270.jpg)
重启`php.ini`保存设置

```
/etc/init.d/php-fpm restart
```



### 2，配置站点目录权限

由于Webhook的推送请求是通过http/https方式发送至服务器,根据webhook.php中的命令执行git pull的实为运行php的用户,根据以下命令可以查执行php用户为`www`.

```
ps aux | grep php
```

确保仓库所在的站点目录所有者为www

```
chown -R www:www /home/wwwroot
```



### 3，切换为www账户

以root账户登陆服务器,修改www的登录权限.

```
vi /etc/passwd
```

找到

```
www:x:1003:1003::/home/www:/sbin/nologin
```

修为改

```
www:x:1003:1003::/home/www:/bin/bash
```



### 4.配置Git

首先在本地创建ssh key；

```css
ssh-keygen -t rsa -C "your_email@youremail.com"  
```

后面的[your_email@youremail.com](https://link.jianshu.com?t=mailto:your_email@youremail.com)改为你GitHub的登录邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。
 回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。为了验证是否成功，在[Git](https://link.jianshu.com?t=http://lib.csdn.net/base/git) bash下输入：

```ruby
$ ssh -T git@github.com  
```

如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。
 接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。

```csharp
$ git config --global user.name "your name"  
$ git config --global user.email "your_email@youremail.com" 
```

接下来在本地仓库里(firstday目录下)添加一些文件，比如README文件，在原来的firstday目录下Git Bash Here:

```ruby
$ git touch README
$ git add README 
$ git commit -m "first commit"  
```

上传到github：

```ruby
$ git push -u origin master（这里可能会有报错：请查看git的报错以及解决方法）
```



##### 新建本地仓库Push到远程Github：

在想要存放仓库的根目录下创建本地仓库：

```css
git init [仓库的名字]
```

或者：
 新建一个存放.git(仓库)的文件如（github目录下面的firstday目录）：

```kotlin
git init //就会在firstday目录下生成.git仓库文件
```

进入要上传的仓库，添加远程地址（**SSH方式**）：

```ruby
$ git remote add origin git@github.com:yourName/yourRepo.git  
```

后面的yourName和yourRepo表示你在github的用户名 和 刚才新建的仓库。



##### Clone远程仓库（SSH地址）：

```
git clone git@github.com:xxxxxx/xxxxxxx.git
```

![img](https://www.ioiox.com/usr/uploads/2020/01/1029326653.jpg)

**<u>注：一定要使用SSH方式添加远程地址，否则毫无SSH免密Push和Pull</u>**



### 5，配置webhook.php

在项目网站根目录创建`webhook.php`获得外网链接为`https://yourdoamin.com/webhook.php`
粘贴以下代码,只需要更改`keySecret`和`wwwRoot`即可.

```php
<?php

// 自行创建一个验证密码
$keySecret = 'xxxxxx';

// 修改为你自己的仓库绝对路径
$wwwRoot = [
    '/home/wwwroot/xxxx',
];

// 保存运行脚本的日志
$logFile = 'log/webhook.log';

// 执行git命令
$gitCommand = 'git pull';

// 判断是否开启秘钥认证(已实现gitee和github)
if (isset($keySecret) && !empty($keySecret)) {
    list($headers, $gitType) = [[], null];
    foreach ($_SERVER as $key => $value) {
        'HTTP_' == substr($key, 0, 5) && $headers[str_replace('_', '-', substr($key, 5))] = $value;
        if (empty($gitType) && strpos($key, 'GITEE') !== false) {
            $gitType = 'GITEE';
        }
        if (empty($gitType) && strpos($key, 'GITHUB') !== false) {
            $gitType = 'GITHUB';
        }
    }
    if ($gitType == 'GITEE') {
        if (!isset($headers['X-GITEE-TOKEN']) || $headers['X-GITEE-TOKEN'] != $keySecret) {
            die('GITEE - 请求失败，秘钥有误');
        }
    } elseif ($gitType == 'GITHUB') {
        $json_content = file_get_contents('php://input');
        $signature = "sha1=" . hash_hmac('sha1', $json_content, $keySecret);
        if ($signature != $headers['X-HUB-SIGNATURE']) {
            die('GITHUB - 请求失败，秘钥有误');
        }
    } else {
        die('请求错误，未知git类型');
    }
}

!is_array($wwwRoot) && $wwwRoot = [$wwwRoot];
foreach ($wwwRoot as $vo) {
    $shell = sprintf("cd %s && git pull 2>&1", $vo);
    $output = shell_exec($shell);
    $log = sprintf("[%s] %s \n", date('Y-m-d H:i:s', time()) . ' - ' . $vo, $output);
    echo $log;
    file_put_contents($logFile, $log, FILE_APPEND);
}
```



### 6，GitHub Webhooks配置

**登陆GitHub - 进入仓库 - Settings - Webhooks - Add webhook**
Payload URL 输入刚才获取的`webhook.php`的外网链接.
Content type 保持默认
Secret 输入刚才配置`webhook.php`创建的验证密码
Add webhook 完成创建
![img](https://www.ioiox.com/usr/uploads/2020/01/193157977.jpg)

##### 恢复关闭www登陆

exit退出www登陆切回root

```
vi /etc/passwd
```

恢复为

```
www:x:1003:1003::/home/www:/sbin/nologin
```



##### 自动化部署成功

本地push代码到GitHub后,可以看到返回信息提示服务器pull成功.
![img](https://www.ioiox.com/usr/uploads/2020/01/4182695417.jpg)

## 关键点和相关错误

### 权限

网上很多教程都没有提到权限问题,所以对于新手小白来说,就会不知道为什么不成功.而少数提到权限的教程,也没有非常详细指导用户如何配置.所以如果部署有问题,请检查权限问题,新手用户可以严格按照本教程先部署成功,在来自行修改你需要的配置.

### webhook.php

webhook.php的代码网上也有很多种,有些能用有些无法使用,本文提供的是经过测试可用的,大家也可以自行搜索或者编辑.

### Service Timeout

当遇到push大量代码时,服务器pull需要更长的时间,所以webhook返回给GitHub的信息如下图会出现Service Timeout超时错误,但实际上服务器也成功执行了pull,你可以登陆服务器检查来确认,同时也可以根据你的项目实际情况自行修改webhook.php执行配置.
![img](https://www.ioiox.com/usr/uploads/2020/01/789124342.jpg)

### 证书错误

有可能会出现下图中的证书错误提示,请更换证书,测试时使用的**Let's Encrypt**的泛域名证书就会报错,博主更换为腾讯云申请的单域名证书就可以了.
![img](https://www.ioiox.com/usr/uploads/2020/01/1075143364.jpg)
